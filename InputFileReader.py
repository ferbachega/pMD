#!/usr/bin/env python
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  


import os
import subprocess
import numpy as np
import math

MOPAC = '/opt/mopac/MOPAC2016.exe'


elements_dict = {'H' : 1.008,   'He' : 4.003, 'Li' : 6.941, 'Be' : 9.012,\
                 'B' : 10.811,  'C' : 12.011, 'N' : 14.007, 'O' : 15.999,\
                 'F' : 18.998,  'Ne' : 20.180, 'Na' : 22.990, 'Mg' : 24.305,\
                 'Al' : 26.982, 'Si' : 28.086, 'P' : 30.974, 'S' : 32.066,\
                 'Cl' : 35.453, 'Ar' : 39.948, 'K' : 39.098, 'Ca' : 40.078,\
                 'Sc' : 44.956, 'Ti' : 47.867, 'V' : 50.942, 'Cr' : 51.996,\
                 'Mn' : 54.938, 'Fe' : 55.845, 'Co' : 58.933, 'Ni' : 58.693,\
                 'Cu' : 63.546, 'Zn' : 65.38, 'Ga' : 69.723, 'Ge' : 72.631,\
                 'As' : 74.922, 'Se' : 78.971, 'Br' : 79.904, 'Kr' : 84.798,\
                 'Rb' : 84.468, 'Sr' : 87.62, 'Y' : 88.906, 'Zr' : 91.224,\
                 'Nb' : 92.906, 'Mo' : 95.95, 'Tc' : 98.907, 'Ru' : 101.07,\
                 'Rh' : 102.906, 'Pd' : 106.42, 'Ag' : 107.868, 'Cd' : 112.414,\
                 'In' : 114.818, 'Sn' : 118.711, 'Sb' : 121.760, 'Te' : 126.7,\
                 'I' : 126.904, 'Xe' : 131.294, 'Cs' : 132.905, 'Ba' : 137.328,\
                 'La' : 138.905, 'Ce' : 140.116, 'Pr' : 140.908, 'Nd' : 144.243,\
                 'Pm' : 144.913, 'Sm' : 150.36, 'Eu' : 151.964, 'Gd' : 157.25,\
                 'Tb' : 158.925, 'Dy': 162.500, 'Ho' : 164.930, 'Er' : 167.259,\
                 'Tm' : 168.934, 'Yb' : 173.055, 'Lu' : 174.967, 'Hf' : 178.49,\
                 'Ta' : 180.948, 'W' : 183.84, 'Re' : 186.207, 'Os' : 190.23,\
                 'Ir' : 192.217, 'Pt' : 195.085, 'Au' : 196.967, 'Hg' : 200.592,\
                 'Tl' : 204.383, 'Pb' : 207.2, 'Bi' : 208.980, 'Po' : 208.982,\
                 'At' : 209.987, 'Rn' : 222.081, 'Fr' : 223.020, 'Ra' : 226.025,\
                 'Ac' : 227.028, 'Th' : 232.038, 'Pa' : 231.036, 'U' : 238.029,\
                 'Np' : 237, 'Pu' : 244, 'Am' : 243, 'Cm' : 247, 'Bk' : 247,\
                 'Ct' : 251, 'Es' : 252, 'Fm' : 257, 'Md' : 258, 'No' : 259,\
                 'Lr' : 262, 'Rf' : 261, 'Db' : 262, 'Sg' : 266, 'Bh' : 264,\
                 'Hs' : 269, 'Mt' : 268, 'Ds' : 271, 'Rg' : 272, 'Cn' : 285,\
                 'Nh' : 284, 'Fl' : 289, 'Mc' : 288, 'Lv' : 292, 'Ts' : 294,\
				 'Og' : 294}



def read_mopac_inputFile (filein):
	""" Function doc """
	filein = open(filein, 'r')
	
	keywords = []
	atoms    = []
	
	for line in filein:
		line2 = line.split() 
		

		
		if line[0] == "*":
			pass
		
		else:
			if "1SCF" in line2:
				keywords = line2

			if len(line2) ==7:
				if "1SCF" in line2:
					pass
				else:
					atom  = [line2[0], line2[1], line2[3], line2[5]]
					
					atoms.append(atom)
					#print line2 
	
	return atoms , keywords 


def build_mopac_inputFile (keywords, atoms, fileName):
	""" Function doc """
	
	filename = open(fileName, 'w')
	
	#header
	header = '* ===============================\n* Input file for Mopac\n* =============================== \n'
	
	#keywords
	s_keywords = ''
	for keyword in keywords:
		s_keywords += keyword + " "
	
	s_keywords += '\n\nMopac file generated by pDM, a python MOPAC interface\n'
	
	#atoms
	s_atom = ''
	for atom in atoms:
		s_atom += atom[0] + '  ' +atom[1] + ' 1 ' + atom[2] + ' 1 ' + atom[3] + ' 1 \n'
	
	text  = header + s_keywords + s_atom
	filename.write(text)


def run_1SCF_mopac_calculation(inputFile, n=0):
	cmd  =  MOPAC + ' ' + inputFile
	os.system(cmd)
	

def mopac_logfile_parser (inputFile):
	inputFile = open(inputFile, 'r')
	
	'''
	FINAL HEAT OF FORMATION =       -250.80265 KCAL/MOL =   -1049.35828 KJ/MOL
	VAN DER WAALS AREA      =        311.93 SQUARE ANGSTROMS
	TOTAL ENERGY            =      -1740.48433 EV
	ELECTRONIC ENERGY       =      -2344.78445 EV  POINT GROUP:     C1  
	CORE-CORE REPULSION     =        604.30012 EV
	DIELECTRIC ENERGY       =         -0.68695 EV
	COSMO AREA              =        311.93 SQUARE ANGSTROMS
	COSMO VOLUME            =        302.99 CUBIC ANGSTROMS
	GRADIENT NORM           =         37.25543 = 8.12980 PER ATOM
	IONIZATION POTENTIAL    =         10.972139 EV
	HOMO LUMO ENERGIES (EV) =        -10.972  2.538
	NO. OF FILLED LEVELS    =         25
	MOLECULAR WEIGHT        =        114.1412
	'''
	

	results = {
				'FINAL HEAT OF FORMATION' : None ,
				'VAN DER WAALS AREA'      : None ,
				'TOTAL ENERGY'            : None ,
				'ELECTRONIC ENERGY'       : None ,
				'CORE-CORE REPULSION'     : None ,
				'DIELECTRIC ENERGY'       : None ,
				'COSMO AREA'              : None ,
				'COSMO VOLUME'            : None ,
				'GRADIENT NORM'           : None ,
				'IONIZATION POTENTIAL'    : None ,
				'HOMO LUMO ENERGIES (EV)' : None ,
				'NO. OF FILLED LEVELS'    : None ,
				'MOLECULAR WEIGHT'        : None ,
				}
	gradients = []





	
	for line in inputFile:
		line2 = line.split() 
		
		#results
		for key in results.keys():
			if key in line:
				line2 = line.split('=')
				line3 = line2[1].split()
				#print key, line3
				results[key] = line3 
		
		#gradients
		
		if len(line2) == 8:
			if line2[-1] == 'KCAL/ANGSTROM':
				print line2
				gradients.append(float(line2[-2]))
	
	
	
	print results		
	
	""" Function doc """
	



class System:
	""" Class doc """
	
	def __init__ (self, atoms):
		""" Class initialiser """
		self.atoms = []
		
		self.size  = len(atoms)
		
		self.name = []
		self.x  = np.zeros (self.size)
		self.y  = np.zeros (self.size)
		self.z  = np.zeros (self.size)

		self.ux  = np.zeros(self.size)
		self.uy  = np.zeros(self.size)
		self.uz  = np.zeros(self.size)
		
		self.fx  = np.zeros(self.size)
		self.fy  = np.zeros(self.size)
		self.fz  = np.zeros(self.size)
		
		self.fx_old  = np.zeros(self.size)
		self.fy_old  = np.zeros(self.size)
		self.fz_old  = np.zeros(self.size)
		
		self.m   = np.zeros(self.size)
		self.q   = np.zeros(self.size)
		
		self.mopac_keywords = []
		self.mopac_results  = None
		

		for i, atom in enumerate(atoms):
			
			self.name.append(atom[0])
			self.x[i]  = atom[1]
			self.y[i]  = atom[2]
			self.z[i]  = atom[3]
			self.m[i]  = elements_dict[self.name[i]]/1000

	def random_velolicies (self, mu = None , sigma = None ):
		""" Function doc """
		mu, sigma = 0, (100)**0.5
		self.ux  =  (np.random.normal(mu, sigma, self.size))*1E-1
		self.uy  =  (np.random.normal(mu, sigma, self.size))*1E-1
		self.uz  =  (np.random.normal(mu, sigma, self.size))*1E-1
		
	
	def energy (self, gradients = True):
		""" Function doc """
		self.build_mopac_inputFile ()
		self.run_1SCF_mopac_calculation()
		self.mopac_logfile_parser()


	def read_mopac_inputFile (self, filein):
		""" Function doc """
		filein = open(filein, 'r')
		
		keywords = []
		atoms    = []
		
		for line in filein:
			line2 = line.split() 
			

			
			if line[0] == "*":
				pass
			
			else:
				if "1SCF" in line2:
					keywords = line2

				if len(line2) ==7:
					if "1SCF" in line2:
						pass
					else:
						atom  = [line2[0], line2[1], line2[3], line2[5]]
						
						atoms.append(atom)

		return atoms , keywords 


	def build_mopac_inputFile (self, fileName = 'tmp.mop'):
		""" Function doc """
		
		filename = open(fileName, 'w')
		
		#header
		header = '* ===============================\n* Input file for Mopac\n* =============================== \n'
		
		#keywords
		s_keywords = ''
		for keyword in self.mopac_keywords:
			s_keywords += keyword + " "
		
		s_keywords += '\n\nMopac file generated by pDM, a python MOPAC interface\n'
		
		#atoms
		s_atom = ''
		
		for index in range(0, self.size):
			s_atom += self.name[index] + '  ' +str(self.x[index]) + ' 1 ' + str(self.y[index]) + ' 1 ' + str(self.z[index]) + ' 1 \n'
		
		text  = header + s_keywords + s_atom
		filename.write(text)


	def run_1SCF_mopac_calculation(self, inputFile  = 'tmp.mop', n=0):
		cmd  =  MOPAC + ' ' + inputFile
		cmd2 =  [MOPAC, inputFile] 
		subprocess.call(cmd2)
		#os.system(cmd)
		

	def mopac_logfile_parser (self, inputFile = 'tmp.out'):
		inputFile = open(inputFile, 'r')
		
		'''
		FINAL HEAT OF FORMATION =       -250.80265 KCAL/MOL =   -1049.35828 KJ/MOL
		VAN DER WAALS AREA      =        311.93 SQUARE ANGSTROMS
		TOTAL ENERGY            =      -1740.48433 EV
		ELECTRONIC ENERGY       =      -2344.78445 EV  POINT GROUP:     C1  
		CORE-CORE REPULSION     =        604.30012 EV
		DIELECTRIC ENERGY       =         -0.68695 EV
		COSMO AREA              =        311.93 SQUARE ANGSTROMS
		COSMO VOLUME            =        302.99 CUBIC ANGSTROMS
		GRADIENT NORM           =         37.25543 = 8.12980 PER ATOM
		IONIZATION POTENTIAL    =         10.972139 EV
		HOMO LUMO ENERGIES (EV) =        -10.972  2.538
		NO. OF FILLED LEVELS    =         25
		MOLECULAR WEIGHT        =        114.1412
		'''
		

		results = {
					'FINAL HEAT OF FORMATION' : None ,
					'VAN DER WAALS AREA'      : None ,
					'TOTAL ENERGY'            : None ,
					'ELECTRONIC ENERGY'       : None ,
					'CORE-CORE REPULSION'     : None ,
					'DIELECTRIC ENERGY'       : None ,
					'COSMO AREA'              : None ,
					'COSMO VOLUME'            : None ,
					'GRADIENT NORM'           : None ,
					'IONIZATION POTENTIAL'    : None ,
					'HOMO LUMO ENERGIES (EV)' : None ,
					'NO. OF FILLED LEVELS'    : None ,
					'MOLECULAR WEIGHT'        : None ,
					}
		gradients = []





		
		for line in inputFile:
			line2 = line.split() 
			
			#results
			for key in results.keys():
				if key in line:
					line2 = line.split('=')
					line3 = line2[1].split()
					#print key, line3
					results[key] = line3 
			
			#gradients
			
			if len(line2) == 8:				
				#['1', '1', 'C', 'CARTESIAN', 'X', '0.375000', '-5.563029', 'KCAL/ANGSTROM']
				if line2[-1] == 'KCAL/ANGSTROM':
					index = int(line2[1]) -1
					if line2[-4] == "X":
						self.fx[index] = -1*float(line2[-2])*4.18*1E-3		
					if line2[-4] == "Y":                             
						self.fy[index] = -1*float(line2[-2])*4.18*1E-3
					if line2[-4] == "Z":                             
						self.fz[index] = -1*float(line2[-2])*4.18*1E-3
					#print line2
					gradients.append(float(line2[-2]))
		
		self.mopac_results = results
		#for index in range(0, len(gradients), 3):
			
		#print self.mopac_results		
		#print self.fx
		#print self.fy
		#print self.fz

		""" Function doc """
		


parameters = {
				'kb'         : 1                                , # 1.38E-23                         ,
				'NA'         : 6.022E23                         ,
				'box'        : [(-50,50), (-50, 50), (-50, 50)] ,
				'T'          : 273.15                           ,
				'dt'         : 0.01                             , #1E-12                            ,
				'nsteps'     : 1000                             ,
				'r_cutoff'   : 8.0                              ,   
			
				'trajout'    : 'traj.xyz'                       , 
			
			 }


def export_cell (box):
	""" Function doc 
	#                #text +=  "ATOM     1  " + atom +   " " +resn+ "  {:4d}    {:8.3f}{:8.3f}{:8.3f}  1.00  0.00          Na+\n".format(resi, float(k), float(i), float(j))
	#
	#                #ATOM, idx, Aname, " ",resn, ' ', chainID,resi,   x,     y,     z,    occ,   tpF,        segID,element," "
	#                text += "{:<6s}{:5d} {:<4s}{:1s}{:<3s}{:1s}{:4s}{:<2s}   {:8.3f}{:8.3f}{:8.3f}{:6.2f}{:6.2f}      {:<4s}{:2s}  {:2s}\n".format(ATOM,
	#               
	ATOM  1      H   LIG  1        -50.00  -50.00  -50.000   1.00  300.00          H 0000  
	ATOM  2      H   LIG  1        -50.00   50.00  -50.000   1.00  300.00          H 0000  
	ATOM  3      H   LIG  1        -50.00  -50.00   50.000   1.00  300.00          H 0000  
	ATOM  4      H   LIG  1         50.00  -50.00  -50.000   1.00  300.00          H 0000  
	ATOM  5      H   LIG  1         50.00   50.00  -50.000   1.00  300.00          H 0000  
	ATOM  6      H   LIG  1         50.00  -50.00   50.000   1.00  300.00          H 0000  
	ATOM  7      H   LIG  1        -50.00   50.00   50.000   1.00  300.00          H 0000  
	ATOM  8      H   LIG  1         50.00   50.00   50.000   1.00  300.00          H 0000  
	p0_0_0 = "ATOM  1      H   LIG  1         %s  %s  %s   1.00  300.00          H 0000\n" %(str(box[0][0]), str(box[1][0]), str(box[2][0]))
	p0_1_0 = "ATOM  2      H   LIG  1         %s  %s  %s   1.00  300.00          H 0000\n" %(str(box[0][0]), str(box[1][1]), str(box[2][0]))
	p0_0_1 = "ATOM  3      H   LIG  1         %s  %s  %s   1.00  300.00          H 0000\n" %(str(box[0][0]), str(box[1][0]), str(box[2][1]))
	p1_0_1 = "ATOM  4      H   LIG  1         %s  %s  %s   1.00  300.00          H 0000\n" %(str(box[0][1]), str(box[1][0]), str(box[2][0]))
	p1_1_0 = "ATOM  5      H   LIG  1         %s  %s  %s   1.00  300.00          H 0000\n" %(str(box[0][1]), str(box[1][1]), str(box[2][0]))
	p1_0_1 = "ATOM  6      H   LIG  1         %s  %s  %s   1.00  300.00          H 0000\n" %(str(box[0][1]), str(box[1][0]), str(box[2][1]))
	p0_1_1 = "ATOM  7      H   LIG  1         %s  %s  %s   1.00  300.00          H 0000\n" %(str(box[0][0]), str(box[1][1]), str(box[2][1]))
	p1_1_1 = "ATOM  8      H   LIG  1         %s  %s  %s   1.00  300.00          H 0000\n" %(str(box[0][1]), str(box[1][1]), str(box[2][1]))
	"""

	cellout = open('cell_xyz.pdb', 'w')
	#         "ATOM     1  " + atom +   " " +resn+ "  {:4d}    {:8.3f}{:8.3f}{:8.3f}  1.00  0.00
	string  = "ATOM  1      H   LIG  1       {:8.3f}{:8.3f}{:8.3f}  1.00  300.00          H 0000\n".format(float(box[0][0]), float(box[1][0]), float(box[2][0]))
	string += "ATOM  2      H   LIG  1       {:8.3f}{:8.3f}{:8.3f}  1.00  300.00          H 0000\n".format(float(box[0][0]), float(box[1][1]), float(box[2][0]))
	string += "ATOM  3      H   LIG  1       {:8.3f}{:8.3f}{:8.3f}  1.00  300.00          H 0000\n".format(float(box[0][0]), float(box[1][0]), float(box[2][1]))
	string += "ATOM  4      H   LIG  1       {:8.3f}{:8.3f}{:8.3f}  1.00  300.00          H 0000\n".format(float(box[0][1]), float(box[1][0]), float(box[2][0]))
	string += "ATOM  5      H   LIG  1       {:8.3f}{:8.3f}{:8.3f}  1.00  300.00          H 0000\n".format(float(box[0][1]), float(box[1][1]), float(box[2][0]))
	string += "ATOM  6      H   LIG  1       {:8.3f}{:8.3f}{:8.3f}  1.00  300.00          H 0000\n".format(float(box[0][1]), float(box[1][0]), float(box[2][1]))
	string += "ATOM  7      H   LIG  1       {:8.3f}{:8.3f}{:8.3f}  1.00  300.00          H 0000\n".format(float(box[0][0]), float(box[1][1]), float(box[2][1]))
	string += "ATOM  8      H   LIG  1       {:8.3f}{:8.3f}{:8.3f}  1.00  300.00          H 0000\n".format(float(box[0][1]), float(box[1][1]), float(box[2][1]))
	string += "CONECT    1    2    3    4 \n"
	string += "CONECT    2    7    5      \n"
	string += "CONECT    3    7    6      \n"
	string += "CONECT    4    5    6      \n" 
	string += "CONECT    5    8           \n"
	string += "CONECT    6    8           \n"
	string += "CONECT    7    8           \n"
	cellout.write(string)

def wallHitCheck (system, box):
	""" Function doc """
	
	for i in range(system.size):
	
		#system.x[i]  += system.ux[i] * dt
		
		#'''
		#walls in X
		if system.x[i] >= box[0][1]:
			diff         =   system.x[i] - box[0][1]
			system.x[i]  =   system.x[i] - diff
			system.ux[i] =  -system.ux[i]
		else:
			pass
			
		if system.x[i] <= box[0][0]:
			diff         =  system.x[i] - box[0][0]
			system.x[i]  =  system.x[i] - diff
			system.ux[i] = -system.ux[i]
		else:
			pass
		#'''



		#'''
		#walls in Y
		if system.y[i] >= box[1][1]:
			diff         =  system.y[i] - box[1][1]
			system.y[i]  =  system.y[i] - diff
			system.uy[i] = -system.uy[i]
		else:
			pass
			
		if system.y[i] <= box[1][0]:
			diff         =   system.y[i] - box[1][0]
			system.y[i]  =   system.y[i] - diff
			system.uy[i] =  -system.uy[i]
		else:
			pass

		#'''
		
		
		
		#'''
		#walls in Z
		if system.z[i] >= box[2][1]:
			diff         =  system.z[i] - box[2][1]
			system.z[i]  =  system.z[i] - diff
			system.uz[i] = -system.uz[i]
		else:
			pass
			
		if system.z[i] <= box[2][0]:
			diff         =   system.z[i] - box[2][0]
			system.z[i]  =   system.z[i] - diff
			system.uz[i] =  -system.uz[i]
		else:
			pass
		#'''
	pass
	
def integrate (system, dt):
	""" Function doc
	def verlet():
		for i in range(0,1000):
			a[i] = -LJ(r[i])
			r[i+1] = r[i] + dt*v[i]+0.5*dt**2*a[i]
			a[i+1] = -LJ(r[i+1])
			v[i+1] = v[i] + 0.5*dt*(a[i]+a[i+1])
			t[i+1] = t[i]+dt
	"""
	#usaremos a formula de euler - tem coisa melhor
	#for i in range(system.size):
	#	
	#	
	#	#print i, pos[i][0],  pos[i][1], pos[i][2], fx[i], fy[i], fz[i]
	#	system.x[i]  += system.ux[i] * dt
	#	system.ux[i] += system.fx[i] * dt / system.m[i]
	#	
	#	system.y[i]  += system.uy[i] * dt
	#	system.uy[i] += system.fy[i] * dt / system.m[i]
	#	
	#	system.z[i]  += system.uz[i] * dt
	#	system.uz[i] += system.fz[i] * dt / system.m[i]
	
	for i in range(system.size):
		system.x[i]  += system.ux[i] * dt + 0.5 * system.fx[i]/system.m[i] * dt**2
		system.y[i]  += system.uy[i] * dt + 0.5 * system.fy[i]/system.m[i] * dt**2
		system.z[i]  += system.uz[i] * dt + 0.5 * system.fz[i]/system.m[i] * dt**2
		
		system.fx_old[i] = system.fx[i]
		system.fy_old[i] = system.fy[i]
		system.fz_old[i] = system.fz[i]
	
	system.energy()
	for i in range(system.size):	
		#
		#v[i+1] = v[i] + 0.5*dt*(a[i]+a[i+1])
		system.ux[i] += 0.5 * (system.fx[i] + system.fx_old[i]) * dt / system.m[i]
		system.uy[i] += 0.5 * (system.fy[i] + system.fy_old[i]) * dt / system.m[i]
		system.uz[i] += 0.5 * (system.fz[i] + system.fz_old[i]) * dt / system.m[i]


		
def write_xyz_file (system, trajout):
	""" Function doc """
	
	#trajout = open(trajout, 'a')
	lines   = [] 
	lines.append("" + str(system.size)+"\n")
	lines.append("\n")

	for i in range(system.size):
		#lines.append("Ar  "+str(pos[i][0])+ "   "+ str(pos[i][1])+"   "+str(pos[i][2])+"\n")
		string = "%s     %f    %f    %f      "%(system.name[i], system.x[i], system.y[i], system.z[i]) 
		lines.append(string+"\n")

	trajout.writelines(lines)
	

def run (system, parameters):
	""" Function doc """
	
	number_of_steps = parameters['nsteps']
	box             = parameters['box']
	export_cell (box)
	
	# cleaning trajectroy files
	trajout = open( parameters['trajout'], 'w')	
	
	dt  = parameters['dt']
	
	system.energy()
	for i in range (number_of_steps):
		
		#forces =  computeForce(system)
		#compute_NB_interactions (system, LJ =  True, coulonb =  False)
		#integrate (pos, ux, uy, uz, fx, fy, fz, m, dt)
		integrate (system, dt)
		wallHitCheck(system, box)
		
		print 'saving coordiantes, step:', i
		write_xyz_file(system, trajout)
		
		#print system.fx[0]
		#print system.E_lj, system.fx, system.fy, system.fz



atoms , keywords  = read_mopac_inputFile("PLM.mop")
#atoms , keywords  = read_mopac_inputFile("NoName.mop")
system = System(atoms)
system.mopac_keywords = keywords
system.mopac_keywords.append('GRADIENTS')
#system.mopac_keywords.append('MOZYME')
#system.mopac_keywords.append('LET')

system.random_velolicies()
print system.m
print system.mopac_keywords

#system.energy()

#'''
index  = []
fx1    = []
fx2    = []
x1     = []
x2     = []
energy = []

'''
for i in range(100):
	system.energy()
	
	system.x[1] = system.x[1] - i/1000.0
	
	Fi = (system.fx[1]**2+ system.fy[1]**2+ system.fz[1]**2)**0.5
	
	
	index.append(i)
	fx1.append(system.fx[0])
	fx2.append(system.fx[1])
	x1.append(system.x[0])
	x2.append(system.x[1]) 
	energy.append(system.mopac_results['FINAL HEAT OF FORMATION'])
	#print i, system.x[0], system.x[1] , system.mopac_results['FINAL HEAT OF FORMATION'], Fi, system.fx[0], system.fx[1]


for i in index:
	print x1[i], x2[i], fx1[i], fx2[i], energy[i]
#'''


run(system, parameters)
#mopac_logfile_parser ('text.out')



	
